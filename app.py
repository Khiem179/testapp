import streamlit as st
import pandas as pd
from vnstock import * # S·ª≠ d·ª•ng c√°c h√†m t·ª´ th∆∞ vi·ªán vnstock
import plotly.graph_objects as go
from datetime import datetime, timedelta

# ------------------------------------------------------------------------------
# C·∫§U H√åNH TRANG WEB
# ------------------------------------------------------------------------------
st.set_page_config(
    page_title="Dashboard Ch·ª©ng Kho√°n Vi·ªát Nam",
    page_icon="üìà",
    layout="wide"
)

# ------------------------------------------------------------------------------
# C√ÅC H√ÄM L·∫§Y D·ªÆ LI·ªÜU (V·ªöI CACHING)
# ------------------------------------------------------------------------------

# Cache ƒë·ªÉ kh√¥ng c·∫ßn t·∫£i l·∫°i danh s√°ch m√£ CK m·ªói l·∫ßn t∆∞∆°ng t√°c
@st.cache_data(ttl=3600) # Cache trong 1 gi·ªù
def get_stock_list():
    """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c m√£ ch·ª©ng kho√°n t·ª´ s√†n."""
    try:
        companies = listing_companies()
        return companies['ticker'].tolist()
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch m√£ ch·ª©ng kho√°n: {e}")
        return []

# Cache d·ªØ li·ªáu gi√° l·ªãch s·ª≠ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
@st.cache_data(ttl=60) # Cache trong 60 gi√¢y
def get_historical_data(symbol, days_to_fetch=365):
    """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ c·ªßa m·ªôt m√£ ch·ª©ng kho√°n."""
    try:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_to_fetch)
        df = stock_historical_data(symbol, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'), "1D")
        if df is not None and not df.empty:
            df.set_index('time', inplace=True)
            df.index = pd.to_datetime(df.index)
            return df
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ cho {symbol}: {e}")
    return pd.DataFrame()

# Cache d·ªØ li·ªáu gi√° hi·ªán t·∫°i
@st.cache_data(ttl=30) # Cache trong 30 gi√¢y
def get_quote_data(symbol):
    """L·∫•y th√¥ng tin gi√° g·∫ßn real-time."""
    try:
        quote = stock_quote(symbol)
        return quote
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu gi√° cho {symbol}: {e}")
        return pd.DataFrame()

# Cache d·ªØ li·ªáu top tƒÉng/gi·∫£m gi√°
@st.cache_data(ttl=60) # Cache trong 60 gi√¢y
def get_top_movers():
    """L·∫•y danh s√°ch top c·ªï phi·∫øu tƒÉng/gi·∫£m/giao d·ªãch nhi·ªÅu nh·∫•t."""
    try:
        gainers = market_top_mover('gainers', 5)
        losers = market_top_mover('losers', 5)
        return gainers, losers
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu top movers: {e}")
        return pd.DataFrame(), pd.DataFrame()

# ------------------------------------------------------------------------------
# H√ÄM V·∫º BI·ªÇU ƒê·ªí
# ------------------------------------------------------------------------------
def plot_candlestick(df, symbol):
    """V·∫Ω bi·ªÉu ƒë·ªì n·∫øn b·∫±ng Plotly."""
    if df.empty:
        return go.Figure()

    fig = go.Figure(data=[go.Candlestick(x=df.index,
                                           open=df['open'],
                                           high=df['high'],
                                           low=df['low'],
                                           close=df['close'],
                                           name=symbol)])

    fig.update_layout(
        title=f'Bi·ªÉu ƒë·ªì n·∫øn cho m√£ {symbol.upper()}',
        xaxis_title='Th·ªùi gian',
        yaxis_title='Gi√° (VND)',
        xaxis_rangeslider_visible=False,
        template='plotly_dark'
    )
    return fig

# ------------------------------------------------------------------------------
# KH·ªûI T·∫†O SESSION STATE
# ------------------------------------------------------------------------------
if 'watchlist' not in st.session_state:
    st.session_state.watchlist = ['VNM', 'FPT', 'HPG']

# ------------------------------------------------------------------------------
# GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI)
# ------------------------------------------------------------------------------

# --- SIDEBAR ---
with st.sidebar:
    st.title("üìà Dashboard Ch·ª©ng Kho√°n")
    st.markdown("---")

    # L·∫•y danh s√°ch m√£ ch·ª©ng kho√°n
    stock_list = get_stock_list()
    
    # Ch·ªçn m√£ ch·ª©ng kho√°n ch√≠nh
    selected_stock = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", stock_list, index=stock_list.index('VNM') if 'VNM' in stock_list else 0)

    st.markdown("---")

    # Qu·∫£n l√Ω Watchlist
    st.header("Watchlist")
    new_stock = st.text_input("Th√™m m√£ v√†o Watchlist", "").upper()
    if st.button("Th√™m m√£"):
        if new_stock and new_stock in stock_list and new_stock not in st.session_state.watchlist:
            st.session_state.watchlist.append(new_stock)
            st.success(f"ƒê√£ th√™m {new_stock} v√†o watchlist!")
        elif new_stock in st.session_state.watchlist:
            st.warning(f"{new_stock} ƒë√£ c√≥ trong watchlist.")
        else:
            st.error(f"M√£ {new_stock} kh√¥ng h·ª£p l·ªá.")
    
    # Hi·ªÉn th·ªã v√† x√≥a m√£ kh·ªèi watchlist
    if st.session_state.watchlist:
        for stock in st.session_state.watchlist:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.info(stock)
            with col2:
                if st.button("X√≥a", key=f"del_{stock}"):
                    st.session_state.watchlist.remove(stock)
                    st.rerun()

    # N√∫t refresh d·ªØ li·ªáu
    st.markdown("---")
    if st.button("L√†m m·ªõi d·ªØ li·ªáu"):
        st.cache_data.clear()
        st.success("ƒê√£ l√†m m·ªõi d·ªØ li·ªáu!")


# --- MAIN CONTENT ---
st.title(f"Th√¥ng tin c·ªï phi·∫øu: {selected_stock.upper()}")

# L·∫•y d·ªØ li·ªáu cho m√£ ƒë√£ ch·ªçn
quote_df = get_quote_data(selected_stock)

# Hi·ªÉn th·ªã th√¥ng tin gi√°
if not quote_df.empty:
    price_info = quote_df.iloc[0]
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Gi√° hi·ªán t·∫°i", f"{price_info['priceCurrent']:,}", f"{price_info['priceChange']:,} ({price_info['priceChangeRatio']:.2f}%)")
    col2.metric("Gi√° tham chi·∫øu", f"{price_info['referencePrice']:,}")
    col3.metric("Gi√° cao nh·∫•t", f"{price_info['highPrice']:,}")
    col4.metric("Kh·ªëi l∆∞·ª£ng", f"{price_info['totalVolume']:,}")
else:
    st.warning("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin gi√° cho m√£ n√†y.")

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn
hist_data = get_historical_data(selected_stock)
if not hist_data.empty:
    st.plotly_chart(plot_candlestick(hist_data, selected_stock), use_container_width=True)
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")


st.markdown("---")
st.header("T·ªïng quan th·ªã tr∆∞·ªùng")

# L·∫•y v√† hi·ªÉn th·ªã top tƒÉng/gi·∫£m
gainers, losers = get_top_movers()

col1, col2 = st.columns(2)

with col1:
    st.subheader("Top 5 tƒÉng gi√°")
    st.dataframe(gainers, use_container_width=True)

with col2:
    st.subheader("Top 5 gi·∫£m gi√°")
    st.dataframe(losers, use_container_width=True)